import{_ as n}from"./plugin-vue_export-helper-c27b6911.js";import{o as s,c as a,f as t}from"./app-50cbe7c2.js";const p={},e=t(`<p>此文档记录 YeeOnlineJudge 后端开发</p><h2 id="项目依赖" tabindex="-1"><a class="header-anchor" href="#项目依赖" aria-hidden="true">#</a> 项目依赖</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>Python <span class="token number">3.9</span>.15

<span class="token comment"># requirements.txt</span>

<span class="token assign-left variable">celery</span><span class="token operator">==</span><span class="token number">5.2</span>.7
<span class="token assign-left variable">Django</span><span class="token operator">==</span><span class="token number">4.0</span>
django-celery-beat<span class="token operator">==</span><span class="token number">2.3</span>.0
django-filter<span class="token operator">==</span><span class="token number">22.1</span>
django-redis<span class="token operator">==</span><span class="token number">5.2</span>.0
<span class="token assign-left variable">djangorestframework</span><span class="token operator">==</span><span class="token number">3.13</span>.1
djangorestframework-simplejwt<span class="token operator">==</span><span class="token number">5.2</span>.0
<span class="token assign-left variable">Markdown</span><span class="token operator">==</span><span class="token number">3.4</span>.1
<span class="token assign-left variable">Pillow</span><span class="token operator">==</span><span class="token number">9.3</span>.0
psycopg2-binary<span class="token operator">==</span><span class="token number">2.9</span>.5
<span class="token assign-left variable">requests</span><span class="token operator">==</span><span class="token number">2.28</span>.1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装依赖" tabindex="-1"><a class="header-anchor" href="#安装依赖" aria-hidden="true">#</a> 安装依赖</h3><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>pip <span class="token function">install</span> <span class="token parameter variable">-r</span> requirements.txt
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="模块功能设计" tabindex="-1"><a class="header-anchor" href="#模块功能设计" aria-hidden="true">#</a> 模块功能设计</h2><div class="hint-container tip"><p class="hint-container-title">提示</p><p>所有模型的主键默认为 <code>id</code> ，特殊情况将使用 <code>*</code> 标注。</p></div><h3 id="organization-模块" tabindex="-1"><a class="header-anchor" href="#organization-模块" aria-hidden="true">#</a> organization 模块</h3><h4 id="模型设计" tabindex="-1"><a class="header-anchor" href="#模型设计" aria-hidden="true">#</a> 模型设计</h4><table><thead><tr><th>模型</th><th>描述</th></tr></thead><tbody><tr><td>Group</td><td>组（班级）模型</td></tr><tr><td>User</td><td>用户模型</td></tr><tr><td>UserProfile</td><td>用户资料模型</td></tr></tbody></table><h5 id="group-模型" tabindex="-1"><a class="header-anchor" href="#group-模型" aria-hidden="true">#</a> Group 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>name</td><td>CharField</td><td>否</td><td>组（班级）名称</td></tr></tbody></table><h5 id="user-模型-继承-abstractbaseuser-类" tabindex="-1"><a class="header-anchor" href="#user-模型-继承-abstractbaseuser-类" aria-hidden="true">#</a> User 模型 （<em>继承 <code>AbstractBaseUser</code> 类</em>）</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>username*</td><td>CharField</td><td>否</td><td>工号/学号</td></tr><tr><td>nickname</td><td>CharField</td><td>否</td><td>昵称</td></tr><tr><td>is_staff</td><td>BooleanField</td><td>否</td><td>是否工作人员</td></tr><tr><td>is_active</td><td>BooleanField</td><td>否</td><td>是否启用</td></tr><tr><td>is_superuser</td><td>BooleanField</td><td>否</td><td>是否超级管理员</td></tr><tr><td>real_name</td><td>CharField</td><td>否</td><td>真名</td></tr><tr><td>email</td><td>EmailField</td><td>否</td><td>电子邮件</td></tr><tr><td>user_role</td><td>CharField</td><td>否</td><td>用户角色</td></tr><tr><td>user_permission</td><td>CharField</td><td>否</td><td>用户权限</td></tr><tr><td>date_joined</td><td>DateTimeField</td><td>否</td><td>加入时间</td></tr><tr><td>last_login_ip</td><td>GenericIPAddressField</td><td>是</td><td>最后登陆IP</td></tr></tbody></table><h5 id="userprofile-模型" tabindex="-1"><a class="header-anchor" href="#userprofile-模型" aria-hidden="true">#</a> UserProfile 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>user</td><td>OneToOneField</td><td>否</td><td>用户</td></tr><tr><td>group</td><td>ForeignKey</td><td>否</td><td>组（班级）</td></tr><tr><td>statistics</td><td>JSONField</td><td>否</td><td>提交数据</td></tr><tr><td>avatar</td><td>ImageField</td><td>否</td><td>头像</td></tr><tr><td>bio</td><td>CharField</td><td>是</td><td>格言</td></tr></tbody></table><h4 id="功能设计" tabindex="-1"><a class="header-anchor" href="#功能设计" aria-hidden="true">#</a> 功能设计</h4><p>organization 模块主要负责：</p><ol><li>组（班级）管理</li><li>用户管理</li><li>用户资料管理</li><li>认证与鉴权</li></ol><p>在认证与鉴权方面，继承 Django 的 <code>AbstractBaseUser</code> 类，参照 Django 的 <code>AbstractUser</code> 类，更改与添加一些用户属性来更好的契合系统，继承 Django 的 <code>BaseUserManager</code>，自定义 UserManager 。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># organization/models.py</span>

<span class="token keyword">class</span> <span class="token class-name">CustomUserManager</span><span class="token punctuation">(</span>BaseUserManager<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">_create_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token operator">**</span>extra_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> username<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;The given username must be set&#39;</span><span class="token punctuation">)</span>
        email <span class="token operator">=</span> self<span class="token punctuation">.</span>normalize_email<span class="token punctuation">(</span>email<span class="token punctuation">)</span>
        user <span class="token operator">=</span> self<span class="token punctuation">.</span>model<span class="token punctuation">(</span>username<span class="token operator">=</span>username<span class="token punctuation">,</span> email<span class="token operator">=</span>email<span class="token punctuation">,</span> <span class="token operator">**</span>extra_fields<span class="token punctuation">)</span>
        user<span class="token punctuation">.</span>password <span class="token operator">=</span> make_password<span class="token punctuation">(</span>password<span class="token punctuation">)</span>
        user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> user

    <span class="token keyword">def</span> <span class="token function">create_user</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>extra_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> extra_fields<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;user_role&#39;</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;TEC&#39;</span><span class="token punctuation">:</span>
            extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;is_staff&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
            extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;user_permission&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;SELF&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;user_role&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;STU&#39;</span><span class="token punctuation">)</span>
            extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;is_staff&#39;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
            extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;user_permission&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;NONE&#39;</span><span class="token punctuation">)</span>
        extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;is_superuser&#39;</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_create_user<span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token operator">**</span>extra_fields<span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">create_superuser</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> email<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">,</span> <span class="token operator">**</span>extra_fields<span class="token punctuation">)</span><span class="token punctuation">:</span>
        extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;user_role&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;TEC&#39;</span><span class="token punctuation">)</span>
        extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;user_permission&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;ALL&#39;</span><span class="token punctuation">)</span>
        extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;is_staff&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
        extra_fields<span class="token punctuation">.</span>setdefault<span class="token punctuation">(</span><span class="token string">&#39;is_superuser&#39;</span><span class="token punctuation">,</span> <span class="token boolean">True</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> extra_fields<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;is_staff&#39;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;Superuser must have is_staff=True.&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> extra_fields<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;is_superuser&#39;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">True</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">&#39;Superuser must have is_superuser=True.&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_create_user<span class="token punctuation">(</span>username<span class="token punctuation">,</span> email<span class="token punctuation">,</span> password<span class="token punctuation">,</span> <span class="token operator">**</span>extra_fields<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>继承 Simple JWT 的 <code>TokenObtainPairView</code> 类，重写 <code>post</code> 方法来记录用户最后一次登录的IP地址，在顶层 <code>urlpatterns</code> 使用该类来完成认证与鉴权。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># organization/views/admin.py</span>

<span class="token keyword">class</span> <span class="token class-name">MyTokenObtainPairView</span><span class="token punctuation">(</span>TokenObtainPairView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        resp <span class="token operator">=</span> <span class="token builtin">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>post<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>
        user <span class="token operator">=</span> User<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> x_forwarded_for <span class="token operator">:=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;HTTP_X_FORWARDED_FOR&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            user<span class="token punctuation">.</span>last_login_ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            user<span class="token punctuation">.</span>last_login_ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;REMOTE_ADDR&#39;</span><span class="token punctuation">)</span>
        user<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> resp


<span class="token comment"># YeeOnlineJudge/urls.py</span>

urlpatterns <span class="token operator">=</span> <span class="token punctuation">[</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    path<span class="token punctuation">(</span><span class="token string">&#39;api/login/&#39;</span><span class="token punctuation">,</span> MyTokenObtainPairView<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;token_obtain_pair&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="problem-模块" tabindex="-1"><a class="header-anchor" href="#problem-模块" aria-hidden="true">#</a> problem 模块</h3><h4 id="模型设计-1" tabindex="-1"><a class="header-anchor" href="#模型设计-1" aria-hidden="true">#</a> 模型设计</h4><table><thead><tr><th>模型</th><th>描述</th></tr></thead><tbody><tr><td>ProblemTag</td><td>题目标签</td></tr><tr><td>TestCase</td><td>测试样例</td></tr><tr><td>Problem</td><td>问题</td></tr></tbody></table><h5 id="problemtag-模型" tabindex="-1"><a class="header-anchor" href="#problemtag-模型" aria-hidden="true">#</a> ProblemTag 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>tag_name</td><td>CharField</td><td>否</td><td>标签名称</td></tr></tbody></table><h5 id="testcase-模型" tabindex="-1"><a class="header-anchor" href="#testcase-模型" aria-hidden="true">#</a> TestCase 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>file</td><td>FileField</td><td>否</td><td>测试样例文件</td></tr><tr><td>created_time</td><td>DateTimeField</td><td>否</td><td>创建日期</td></tr><tr><td>struct</td><td>JSONField</td><td>否</td><td>测试样例结构</td></tr></tbody></table><h5 id="problem-模型" tabindex="-1"><a class="header-anchor" href="#problem-模型" aria-hidden="true">#</a> Problem 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>title</td><td>CharField</td><td>否</td><td>题目标题</td></tr><tr><td>desc</td><td>TextField</td><td>否</td><td>题目描述</td></tr><tr><td>input_desc</td><td>TextField</td><td>否</td><td>输入描述</td></tr><tr><td>output_desc</td><td>TextField</td><td>否</td><td>输出描述</td></tr><tr><td>sample</td><td>JSONField</td><td>是</td><td>输入输出样例</td></tr><tr><td>template</td><td>JSONField</td><td>是</td><td>模版</td></tr><tr><td>hint</td><td>TextField</td><td>是</td><td>提示</td></tr><tr><td>languages</td><td>JSONField</td><td>否</td><td>可提交的语言</td></tr><tr><td>time_limit</td><td>IntegerField</td><td>否</td><td>时间限制</td></tr><tr><td>memory_limit</td><td>IntegerField</td><td>否</td><td>内存限制</td></tr><tr><td>difficulty</td><td>CharField</td><td>否</td><td>难度</td></tr><tr><td>mode</td><td>CharField</td><td>否</td><td>模式</td></tr><tr><td>test_case</td><td>ForeignKey</td><td>否</td><td>测试样例</td></tr><tr><td>point</td><td>JSONField</td><td>否</td><td>分数</td></tr><tr><td>is_public</td><td>BooleanField</td><td>否</td><td>前台用户是否可见</td></tr><tr><td>tags</td><td>ManyToManyField</td><td>否</td><td>题目标签</td></tr><tr><td>source</td><td>CharField</td><td>是</td><td>题源</td></tr><tr><td>visible</td><td>BooleanField</td><td>否</td><td>工作人员是否可见</td></tr><tr><td>created_time</td><td>DateTimeField</td><td>否</td><td>创建时间</td></tr><tr><td>last_update_time</td><td>DateTimeField</td><td>否</td><td>最后更新时间</td></tr><tr><td>statistics</td><td>JSONField</td><td>否</td><td>提交数据</td></tr><tr><td>created_by</td><td>ForeignKey</td><td>是</td><td>创建者</td></tr></tbody></table><h4 id="功能设计-1" tabindex="-1"><a class="header-anchor" href="#功能设计-1" aria-hidden="true">#</a> 功能设计</h4><p>problem 模块主要负责：</p><ol><li>题目标签管理</li><li>测试样例管理</li><li>题目管理</li></ol><p>在使用模版判题时使用如下模版进行判题，<code>//TEMPLATE BEGIN...//TEMPLATE END</code> 间为作答部分，在提交后与 <code>//PREPEND BEGIN...//PREPEND END</code> 和 <code>//APPEND BEGIN...//APPEND END</code> 这两部分结合交予判题机进行判题。</p><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">//PREPEND BEGIN</span>
<span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>util<span class="token punctuation">.</span></span><span class="token class-name">Scanner</span></span><span class="token punctuation">;</span>
<span class="token comment">//PREPEND END</span>

<span class="token comment">//TEMPLATE BEGIN</span>
<span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> a<span class="token punctuation">,</span> <span class="token keyword">int</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> _________<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//TEMPLATE END</span>

<span class="token comment">//APPEND BEGIN</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>
    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">Scanner</span> scanner <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Scanner</span><span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span>in<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token class-name">Solution</span> solution <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">while</span> <span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">hasNext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>solution<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> scanner<span class="token punctuation">.</span><span class="token function">nextInt</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token comment">//APPEND END</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后端在存储测试样例的分数使用如下 JSON 结构，当题目为 ACM 模式，分数默认计为100。</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code><span class="token punctuation">[</span>
    <span class="token comment">// test_case #1</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;input_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.in&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;output_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;1.out&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;point&quot;</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token comment">// ignore in ACM mode</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>

    <span class="token comment">// test_case #2</span>
    <span class="token punctuation">{</span>
        <span class="token property">&quot;input_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.in&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;output_name&quot;</span><span class="token operator">:</span> <span class="token string">&quot;2.out&quot;</span><span class="token punctuation">,</span>
        <span class="token property">&quot;point&quot;</span><span class="token operator">:</span> <span class="token number">50</span> <span class="token comment">// ignore in ACM mode</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>此外，对题目的增改有对 <code>languages</code>、 <code>template</code>、 <code>test_case</code>、<code>point</code> 有如下验证。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># problem/serializers.py</span>

<span class="token keyword">class</span> <span class="token class-name">BaseProblemSerializer</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">for</span> i <span class="token keyword">in</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;languages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> get_languages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;specify language does not support&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> template <span class="token operator">:=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;template&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">for</span> key <span class="token keyword">in</span> template<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;languages&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;specify language in template does not support&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> tc_id <span class="token operator">:=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;test_case&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                test_case <span class="token operator">=</span> TestCase<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">id</span><span class="token operator">=</span>tc_id<span class="token punctuation">)</span>
            <span class="token keyword">except</span> TestCase<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;this test case does not exist&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            data<span class="token punctuation">.</span>update<span class="token punctuation">(</span>test_case<span class="token operator">=</span>test_case<span class="token punctuation">)</span>
        <span class="token keyword">elif</span> self<span class="token punctuation">.</span>instance<span class="token punctuation">:</span>
            test_case <span class="token operator">=</span> self<span class="token punctuation">.</span>instance<span class="token punctuation">.</span>test_case
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;test case cannot be null&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> self<span class="token punctuation">.</span>instance <span class="token keyword">and</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;point&#39;</span><span class="token punctuation">)</span> <span class="token keyword">is</span> <span class="token boolean">None</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> data

        tc_struct <span class="token operator">=</span> test_case<span class="token punctuation">.</span>struct
        <span class="token keyword">if</span> point <span class="token operator">:=</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;point&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tc_struct<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>point<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token string">&quot;point invalid&quot;</span><span class="token punctuation">)</span>
            <span class="token keyword">for</span> ori<span class="token punctuation">,</span> <span class="token builtin">cmp</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>tc_struct<span class="token punctuation">,</span> point<span class="token punctuation">)</span><span class="token punctuation">:</span>
                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span><span class="token builtin">cmp</span><span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span><span class="token string">&#39;input_name&#39;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">cmp</span><span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span><span class="token string">&#39;output_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;point invalid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;mode&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token string">&#39;OI&#39;</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token keyword">not</span> <span class="token builtin">cmp</span><span class="token punctuation">.</span>__contains__<span class="token punctuation">(</span><span class="token string">&#39;point&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;point invalid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> ori<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;input_name&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">cmp</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;input_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;point invalid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
                <span class="token keyword">if</span> ori<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;output_name&#39;</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">cmp</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;output_name&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
                    <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;point invalid&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;point is null&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> data
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="training-模块" tabindex="-1"><a class="header-anchor" href="#training-模块" aria-hidden="true">#</a> training 模块</h3><h4 id="模型设计-2" tabindex="-1"><a class="header-anchor" href="#模型设计-2" aria-hidden="true">#</a> 模型设计</h4><table><thead><tr><th>模型</th><th>描述</th></tr></thead><tbody><tr><td>ProblemSet</td><td>题集</td></tr><tr><td>TrainingBase</td><td>比赛训练基类（抽象类）</td></tr><tr><td>Training</td><td>比赛训练</td></tr><tr><td>LearningPlan</td><td>学习计划</td></tr><tr><td>TrainingRank</td><td>比赛训练排名</td></tr></tbody></table><h5 id="problemset-模型" tabindex="-1"><a class="header-anchor" href="#problemset-模型" aria-hidden="true">#</a> ProblemSet 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>title</td><td>CharField</td><td>否</td><td>题集名称</td></tr><tr><td>problems</td><td>ManyToManyField</td><td>否</td><td>题集所包含题目</td></tr></tbody></table><h5 id="trainingbase-模型-抽象类" tabindex="-1"><a class="header-anchor" href="#trainingbase-模型-抽象类" aria-hidden="true">#</a> TrainingBase 模型 （<em>抽象类</em>）</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>title</td><td>CharField</td><td>否</td><td>标题</td></tr><tr><td>description</td><td>TextField</td><td>否</td><td>描述</td></tr><tr><td>created_time</td><td>DateTimeField</td><td>否</td><td>创建时间</td></tr><tr><td>is_open</td><td>BooleanField</td><td>否</td><td>是否开启</td></tr><tr><td>created_by</td><td>ForeignKey</td><td>是</td><td>创建者</td></tr></tbody></table><h5 id="training-模型-继承-trainingbase-类" tabindex="-1"><a class="header-anchor" href="#training-模型-继承-trainingbase-类" aria-hidden="true">#</a> Training 模型 （<em>继承 <code>TrainingBase</code> 类</em>）</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>start_time</td><td>DateTimeField</td><td>否</td><td>起始时间</td></tr><tr><td>end_time</td><td>DateTimeField</td><td>否</td><td>结束时间</td></tr><tr><td>problems</td><td>ManyToManyField</td><td>否</td><td>题目</td></tr><tr><td>mode</td><td>CharField</td><td>否</td><td>模式</td></tr><tr><td>group</td><td>ManyToManyField</td><td>是</td><td>可参加的组</td></tr><tr><td>user</td><td>ManyToManyField</td><td>是</td><td>可参加的用户</td></tr><tr><td>password</td><td>CharField</td><td>是</td><td>密码</td></tr></tbody></table><h5 id="learningplan-模型-继承-trainingbase-类" tabindex="-1"><a class="header-anchor" href="#learningplan-模型-继承-trainingbase-类" aria-hidden="true">#</a> LearningPlan 模型 （<em>继承 <code>TrainingBase</code> 类</em>）</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>stage</td><td>ManyToManyField</td><td>否</td><td>阶段</td></tr><tr><td>ordering</td><td>JSONField</td><td>否</td><td>顺序</td></tr></tbody></table><h5 id="trainingrank-模型" tabindex="-1"><a class="header-anchor" href="#trainingrank-模型" aria-hidden="true">#</a> TrainingRank 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>user</td><td>ForeignKey</td><td>否</td><td>用户</td></tr><tr><td>training</td><td>ForeignKey</td><td>否</td><td>比赛</td></tr><tr><td>statistics</td><td>JSONField</td><td>否</td><td>训练比赛数据</td></tr></tbody></table><h4 id="功能设计-2" tabindex="-1"><a class="header-anchor" href="#功能设计-2" aria-hidden="true">#</a> 功能设计</h4><p>training 模块主要负责：</p><ol><li>题集管理</li><li>训练比赛管理</li><li>学习计划管理</li><li>训练比赛排名</li></ol><p><code>TrainingBase</code> 为抽象模型，<code>Training</code> 和 <code>LearningPlan</code> 去继承该类实现实体模型，因为 <code>Training</code> 和 <code>LearningPlan</code> 继承该类的 <code>created_by</code> 字段，导致在后续进行反向查询时会有非唯一结果，所以需要在 <code>related_name</code> 使用 <code>%(class)s_creator</code> 来获取唯一的结果。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># training/models.py</span>

<span class="token keyword">class</span> <span class="token class-name">TrainingBase</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    title <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">&quot;title&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">25</span><span class="token punctuation">)</span>
    description <span class="token operator">=</span> models<span class="token punctuation">.</span>TextField<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">&quot;description&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">)</span>
    created_time <span class="token operator">=</span> models<span class="token punctuation">.</span>DateTimeField<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">&quot;created time&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> auto_now_add<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    is_open <span class="token operator">=</span> models<span class="token punctuation">.</span>BooleanField<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">&quot;open whether or not&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>
    created_by <span class="token operator">=</span> models<span class="token punctuation">.</span>ForeignKey<span class="token punctuation">(</span>User<span class="token punctuation">,</span> on_delete<span class="token operator">=</span>models<span class="token punctuation">.</span>SET_NULL<span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">&#39;%(class)s_creator&#39;</span><span class="token punctuation">)</span>

    <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> self<span class="token punctuation">.</span>title

    <span class="token keyword">class</span> <span class="token class-name">Meta</span><span class="token punctuation">:</span>
        abstract <span class="token operator">=</span> <span class="token boolean">True</span>
        ordering <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;-created_time&#39;</span><span class="token punctuation">]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>训练比赛有三种参赛方式，分别是：</p><ol><li>组</li><li>用户</li><li>密码</li></ol><p>以上三种为或关系，满足一项即可参赛。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># training/models.py</span>

<span class="token keyword">class</span> <span class="token class-name">Training</span><span class="token punctuation">(</span>TrainingBase<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    group <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>Group<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">&#39;train_groups&#39;</span><span class="token punctuation">)</span>
    user <span class="token operator">=</span> models<span class="token punctuation">.</span>ManyToManyField<span class="token punctuation">(</span>User<span class="token punctuation">,</span> related_name<span class="token operator">=</span><span class="token string">&#39;train_users&#39;</span><span class="token punctuation">)</span>
    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">&quot;password&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>参赛时会对以上三项进行验证，验证通过后会将验证信息存入缓存以供读取。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># training/views/normal.py</span>

<span class="token decorator annotation punctuation">@api_view</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;POST&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token decorator annotation punctuation">@permission_classes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>permissions<span class="token punctuation">.</span>IsAuthenticated<span class="token punctuation">]</span><span class="token punctuation">)</span>
<span class="token keyword">def</span> <span class="token function">training_verify</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> <span class="token keyword">not</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;id为空&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_400_BAD_REQUEST<span class="token punctuation">)</span>

        training <span class="token operator">=</span> Training<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>is_open<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    <span class="token keyword">except</span> Training<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;比赛不存在&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_404_NOT_FOUND<span class="token punctuation">)</span>

    training_verify_set <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;training_verify_&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span> <span class="token keyword">and</span> \\
            training<span class="token punctuation">.</span>password <span class="token keyword">and</span> \\
            check_password<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> training<span class="token punctuation">.</span>password<span class="token punctuation">)</span><span class="token punctuation">:</span>
        training_verify_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span>
        cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;training_verify_&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> training_verify_set<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>

    <span class="token comment"># 无密码使用身份认证参加，如登录用户在比赛所允许的用户或组内，即可认证成功</span>
    <span class="token keyword">try</span><span class="token punctuation">:</span>
        user_group <span class="token operator">=</span> request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>profile<span class="token punctuation">.</span>group
        <span class="token keyword">if</span> training<span class="token punctuation">.</span>user<span class="token punctuation">.</span>get<span class="token punctuation">(</span>username<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span> <span class="token keyword">or</span> training<span class="token punctuation">.</span>group<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>user_group<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            training_verify_set<span class="token punctuation">.</span>add<span class="token punctuation">(</span>request<span class="token punctuation">.</span>user<span class="token punctuation">.</span>username<span class="token punctuation">)</span>
            cache<span class="token punctuation">.</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token string">&#39;training_verify_&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> training_verify_set<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>
            <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;ok&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>
    <span class="token keyword">except</span> ObjectDoesNotExist<span class="token punctuation">:</span>
        <span class="token keyword">return</span> Response<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;failed&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_403_FORBIDDEN<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="submission-模块" tabindex="-1"><a class="header-anchor" href="#submission-模块" aria-hidden="true">#</a> submission 模块</h3><h4 id="模型设计-3" tabindex="-1"><a class="header-anchor" href="#模型设计-3" aria-hidden="true">#</a> 模型设计</h4><table><thead><tr><th>模型</th><th>描述</th></tr></thead><tbody><tr><td>Submission</td><td>提交</td></tr></tbody></table><h5 id="submission-模型" tabindex="-1"><a class="header-anchor" href="#submission-模型" aria-hidden="true">#</a> Submission 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>problem</td><td>ForeignKey</td><td>否</td><td>提交题目</td></tr><tr><td>token</td><td>JSONField</td><td>否</td><td>每个测试样例提交到 Judge0 的 Token</td></tr><tr><td>code</td><td>TextField</td><td>否</td><td>提交代码</td></tr><tr><td>language_id</td><td>IntegerField</td><td>否</td><td>提交语言ID</td></tr><tr><td>training</td><td>ForeignKey</td><td>是</td><td>比赛或练习ID</td></tr><tr><td>time</td><td>IntegerField</td><td>是</td><td>运行时间（ms）</td></tr><tr><td>memory</td><td>IntegerField</td><td>是</td><td>使用内存（kb）</td></tr><tr><td>status</td><td>CharField</td><td>否</td><td>提交状态</td></tr><tr><td>created_time</td><td>DateTimeField</td><td>否</td><td>提交时间</td></tr><tr><td>created_by</td><td>ForeignKey</td><td>否</td><td>提交者</td></tr><tr><td>submit_ip</td><td>GenericIPAddressField</td><td>否</td><td>提交IP</td></tr></tbody></table><h4 id="功能设计-3" tabindex="-1"><a class="header-anchor" href="#功能设计-3" aria-hidden="true">#</a> 功能设计</h4><p>submission 模块主要负责：</p><ol><li>提交管理</li><li>结合 organization、 problem、 training 模块实现 OJ 的主要功能</li></ol><p>因为要对每个测试样例的对错进行记录以方便信息统计，所以在模型设计上存储了该提交所对应的题目的每个测试样例的提交 Token。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># submission/models.py</span>

<span class="token keyword">class</span> <span class="token class-name">Submission</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    token <span class="token operator">=</span> models<span class="token punctuation">.</span>JSONField<span class="token punctuation">(</span>_<span class="token punctuation">(</span><span class="token string">&quot;submission token&quot;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> default<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>在进行提交时，首先提交的问题中有 <code>template</code> 存在且提交的语言为 <code>template</code> 支持的语言，则把提交的代码与 <code>template</code> 结合起来提交；其次记录提交的IP地址；如请求字段中有 <code>stdin</code> 则作为测试提交，只交由判题，不做数据统计，反之则提交并进行数据统计；对于一个用户的首次训练比赛提交，为其创建训练比赛排名信息进行数据记录。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># submission/views/normal.py</span>

<span class="token keyword">class</span> <span class="token class-name">SubmissionListCreateView</span><span class="token punctuation">(</span>generics<span class="token punctuation">.</span>ListCreateAPIView<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">def</span> <span class="token function">create</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> template <span class="token operator">:=</span> Problem<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;problem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>template<span class="token punctuation">:</span>
            <span class="token keyword">if</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;language_id&#39;</span><span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> template<span class="token punctuation">.</span>keys<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>
                prased <span class="token operator">=</span> prase_template<span class="token punctuation">(</span>template<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;language_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
                request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>
                    <span class="token string">&quot;code&quot;</span><span class="token punctuation">:</span> <span class="token string-interpolation"><span class="token string">f&quot;</span><span class="token interpolation"><span class="token punctuation">{</span>prased<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;prepend&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">\\n</span><span class="token interpolation"><span class="token punctuation">{</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">\\n</span><span class="token interpolation"><span class="token punctuation">{</span>prased<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;append&#39;</span><span class="token punctuation">)</span><span class="token punctuation">}</span></span><span class="token string">&quot;</span></span>
                <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> x_forwarded_for <span class="token operator">:=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;HTTP_X_FORWARDED_FOR&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            ip <span class="token operator">=</span> x_forwarded_for<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">&#39;,&#39;</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            ip <span class="token operator">=</span> request<span class="token punctuation">.</span>META<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;REMOTE_ADDR&#39;</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;stdin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            expected_output <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;expected_output&#39;</span><span class="token punctuation">)</span>
            problem <span class="token operator">=</span> Problem<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;problem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            sub <span class="token operator">=</span> submission<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>
                source_code<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                language<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;language_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                stdin<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;stdin&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                expected_output<span class="token operator">=</span><span class="token boolean">None</span> <span class="token keyword">if</span> <span class="token keyword">not</span> expected_output <span class="token keyword">else</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>expected_output<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                cpu_time_limit<span class="token operator">=</span>problem<span class="token punctuation">.</span>time_limit <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">,</span>
                memory_limit<span class="token operator">=</span>problem<span class="token punctuation">.</span>memory_limit <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
                wait<span class="token operator">=</span><span class="token boolean">True</span>
            <span class="token punctuation">)</span>
            <span class="token keyword">return</span> Response<span class="token punctuation">(</span>sub<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_200_OK<span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            serializer <span class="token operator">=</span> self<span class="token punctuation">.</span>get_serializer<span class="token punctuation">(</span>data<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
            serializer<span class="token punctuation">.</span>is_valid<span class="token punctuation">(</span>raise_exception<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>
            submit <span class="token operator">=</span> serializer<span class="token punctuation">.</span>save<span class="token punctuation">(</span>created_by<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">,</span> status<span class="token operator">=</span>Submission<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>IQ<span class="token punctuation">,</span> submit_ip<span class="token operator">=</span>ip<span class="token punctuation">)</span>
            headers <span class="token operator">=</span> self<span class="token punctuation">.</span>get_success_headers<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">)</span>
            to_judge<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>
                code<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;code&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                language_id<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;language_id&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                problem_id<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;problem&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                submission_id<span class="token operator">=</span>submit<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span>
                training<span class="token operator">=</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;training&#39;</span><span class="token punctuation">)</span>
            <span class="token punctuation">)</span>

        <span class="token keyword">if</span> training <span class="token operator">:=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;training&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            <span class="token keyword">try</span><span class="token punctuation">:</span>
                TrainingRank<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">,</span> training_id<span class="token operator">=</span>training<span class="token punctuation">)</span>
            <span class="token keyword">except</span> TrainingRank<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
                TrainingRank<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>create<span class="token punctuation">(</span>user<span class="token operator">=</span>request<span class="token punctuation">.</span>user<span class="token punctuation">,</span> training_id<span class="token operator">=</span>training<span class="token punctuation">,</span>
                                            statistics<span class="token operator">=</span><span class="token punctuation">{</span>
                                                <span class="token string">&quot;statistics&quot;</span><span class="token punctuation">:</span> default_statistics<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                                <span class="token string">&quot;score&quot;</span><span class="token punctuation">:</span> <span class="token number">0</span>
                                            <span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>serializer<span class="token punctuation">.</span>data<span class="token punctuation">,</span> status<span class="token operator">=</span>status<span class="token punctuation">.</span>HTTP_201_CREATED<span class="token punctuation">,</span> headers<span class="token operator">=</span>headers<span class="token punctuation">)</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>后交由验证提交是否为题目支持的语言，是否具有参赛权限等。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># submission/serializers.py</span>

<span class="token keyword">class</span> <span class="token class-name">BaseSubmissionSerializers</span><span class="token punctuation">(</span>serializers<span class="token punctuation">.</span>ModelSerializer<span class="token punctuation">)</span><span class="token punctuation">:</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
    <span class="token keyword">def</span> <span class="token function">validate</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">:</span>
        problem <span class="token operator">=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;problem&quot;</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;language_id&#39;</span><span class="token punctuation">)</span> <span class="token keyword">not</span> <span class="token keyword">in</span> problem<span class="token punctuation">.</span>languages<span class="token punctuation">:</span>
            <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;language does not support&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> training <span class="token operator">:=</span> attrs<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;training&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            training_verify_set <span class="token operator">=</span> cache<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;training_verify_&#39;</span> <span class="token operator">+</span> <span class="token builtin">str</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;training&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                                            <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> self<span class="token punctuation">.</span>context<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;request&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>user<span class="token punctuation">.</span>username <span class="token keyword">not</span> <span class="token keyword">in</span> training_verify_set<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;you do not have permission to access this training&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> training<span class="token punctuation">.</span>end_time<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;training has expired&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            <span class="token keyword">if</span> datetime<span class="token punctuation">.</span>now<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> training<span class="token punctuation">.</span>start_time<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;training has not started&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

            <span class="token keyword">try</span><span class="token punctuation">:</span>
                training<span class="token punctuation">.</span>problems<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>problem<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span>
            <span class="token keyword">except</span> Problem<span class="token punctuation">.</span>DoesNotExist<span class="token punctuation">:</span>
                <span class="token keyword">raise</span> serializers<span class="token punctuation">.</span>ValidationError<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token string">&quot;detail&quot;</span><span class="token punctuation">:</span> <span class="token string">&quot;problem not in this training&quot;</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">return</span> attrs
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="announcement-模块" tabindex="-1"><a class="header-anchor" href="#announcement-模块" aria-hidden="true">#</a> announcement 模块</h3><h4 id="模型设计-4" tabindex="-1"><a class="header-anchor" href="#模型设计-4" aria-hidden="true">#</a> 模型设计</h4><table><thead><tr><th>模型</th><th>描述</th></tr></thead><tbody><tr><td>Announcement</td><td>公告</td></tr></tbody></table><h5 id="announcement-模型" tabindex="-1"><a class="header-anchor" href="#announcement-模型" aria-hidden="true">#</a> Announcement 模型</h5><table><thead><tr><th>字段名称</th><th>字段类型</th><th>可为空</th><th>字段说明</th></tr></thead><tbody><tr><td>title</td><td>CharField</td><td>否</td><td>标题</td></tr><tr><td>content</td><td>TextField</td><td>否</td><td>内容</td></tr><tr><td>created_time</td><td>DateTimeField</td><td>否</td><td>创建时间</td></tr><tr><td>last_update_time</td><td>DateTimeField</td><td>是</td><td>最后更新日期</td></tr><tr><td>training</td><td>ForeignKey</td><td>是</td><td>比赛</td></tr><tr><td>created_by</td><td>ForeignKey</td><td>是</td><td>创建者</td></tr><tr><td>visible</td><td>BooleanField</td><td>否</td><td>是否可见</td></tr></tbody></table><h4 id="功能设计-4" tabindex="-1"><a class="header-anchor" href="#功能设计-4" aria-hidden="true">#</a> 功能设计</h4><p>announcement 模块主要负责：</p><ol><li>公告管理</li><li>训练比赛公告管理</li></ol><h2 id="celery-异步任务" tabindex="-1"><a class="header-anchor" href="#celery-异步任务" aria-hidden="true">#</a> Celery 异步任务</h2><h3 id="功能设计-5" tabindex="-1"><a class="header-anchor" href="#功能设计-5" aria-hidden="true">#</a> 功能设计</h3><p>首先对在待判题队列的提交进行处理，即将提交所对应的题目的测试样例一一送至判题机进行判题，保留返回 Token 并存储，并根据返回状态对提交状态的更新，完成以上任务后将进行训练比赛的排名更新和用户、题目、比赛数据的更新。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># YeeOnlineJudge/tasks.py</span>

<span class="token decorator annotation punctuation">@shared_task</span>
<span class="token keyword">def</span> <span class="token function">to_judge</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> language_id<span class="token punctuation">,</span> problem_id<span class="token punctuation">,</span> submission_id<span class="token punctuation">,</span> training<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    submit <span class="token operator">=</span> Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>submission_id<span class="token punctuation">)</span>
    submit<span class="token punctuation">.</span>status <span class="token operator">=</span> Submission<span class="token punctuation">.</span>Status<span class="token punctuation">.</span>PROCESSING
    submit<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>

    problem <span class="token operator">=</span> Problem<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>problem_id<span class="token punctuation">)</span>

    test_case <span class="token operator">=</span> problem<span class="token punctuation">.</span>test_case<span class="token punctuation">.</span><span class="token builtin">file</span>
    stdin_list<span class="token punctuation">,</span> expected_output_list <span class="token operator">=</span> read_test_case<span class="token punctuation">(</span>test_case<span class="token punctuation">)</span>
    token_list <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
    wrong_flag <span class="token operator">=</span> <span class="token boolean">False</span>
    <span class="token keyword">if</span> training<span class="token punctuation">:</span>
        train <span class="token operator">=</span> submit<span class="token punctuation">.</span>training
        user <span class="token operator">=</span> submit<span class="token punctuation">.</span>created_by
        statistics <span class="token operator">=</span> train<span class="token punctuation">.</span>trainingrank_set<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span><span class="token punctuation">.</span>statistics
        test_case_status <span class="token operator">=</span> statistics<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>problem_id<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        statistics <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
        test_case_status <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
    <span class="token comment"># 将一道题目中的每个测试样例和提交的代码送去判题机</span>
    <span class="token keyword">for</span> index<span class="token punctuation">,</span> val <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span><span class="token builtin">zip</span><span class="token punctuation">(</span>stdin_list<span class="token punctuation">,</span> expected_output_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        stdin <span class="token operator">=</span> val<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>
        expected_output <span class="token operator">=</span> val<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>
        sub <span class="token operator">=</span> submission<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>
            source_code<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            language<span class="token operator">=</span>language_id<span class="token punctuation">,</span>
            stdin<span class="token operator">=</span><span class="token builtin">bytes</span><span class="token punctuation">(</span>stdin<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            expected_output<span class="token operator">=</span><span class="token boolean">None</span> <span class="token keyword">if</span> <span class="token keyword">not</span> expected_output <span class="token keyword">else</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>expected_output<span class="token punctuation">,</span> <span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
            cpu_time_limit<span class="token operator">=</span>problem<span class="token punctuation">.</span>time_limit <span class="token operator">/</span> <span class="token number">1000</span><span class="token punctuation">,</span>
            memory_limit<span class="token operator">=</span>problem<span class="token punctuation">.</span>memory_limit <span class="token operator">*</span> <span class="token number">1024</span><span class="token punctuation">,</span>
            wait<span class="token operator">=</span><span class="token boolean">True</span>
        <span class="token punctuation">)</span>
        token_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>sub<span class="token punctuation">.</span>token<span class="token punctuation">)</span>
        index <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
        <span class="token keyword">if</span> problem<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">&#39;OI&#39;</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token keyword">not</span> wrong_flag<span class="token punctuation">)</span><span class="token punctuation">:</span>
            submit<span class="token punctuation">.</span>status <span class="token operator">=</span> Submission<span class="token punctuation">.</span>translate_status<span class="token punctuation">(</span>sub<span class="token punctuation">.</span>status<span class="token punctuation">)</span>

        <span class="token comment"># 提交的状态id大于3即为出错，对于ACM模式直接停止判题并记录提交状态。对于OI模式则继续，但不会继续更新此提交的状态</span>
        <span class="token keyword">if</span> sub<span class="token punctuation">.</span>status<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">3</span><span class="token punctuation">:</span>
            <span class="token comment"># 之前做对不更新</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> test_case_status<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
                test_case_status<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>index<span class="token punctuation">:</span> <span class="token boolean">False</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
            wrong_flag <span class="token operator">=</span> <span class="token boolean">True</span>
        <span class="token keyword">elif</span> sub<span class="token punctuation">.</span>status<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;id&#39;</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>
            test_case_status<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>index<span class="token punctuation">:</span> <span class="token boolean">True</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
        <span class="token keyword">else</span><span class="token punctuation">:</span>
            <span class="token keyword">if</span> <span class="token keyword">not</span> test_case_status<span class="token punctuation">.</span>get<span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>
                test_case_status<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>index<span class="token punctuation">:</span> <span class="token boolean">None</span><span class="token punctuation">}</span><span class="token punctuation">)</span>

        <span class="token keyword">if</span> problem<span class="token punctuation">.</span>mode <span class="token operator">==</span> <span class="token string">&#39;ACM&#39;</span><span class="token punctuation">:</span>
            submit<span class="token punctuation">.</span>status <span class="token operator">=</span> Submission<span class="token punctuation">.</span>translate_status<span class="token punctuation">(</span>sub<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
            <span class="token keyword">if</span> wrong_flag<span class="token punctuation">:</span>
                <span class="token keyword">break</span>

    submit<span class="token punctuation">.</span>token <span class="token operator">=</span> token_list
    submit<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>

    statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token builtin">str</span><span class="token punctuation">(</span>problem_id<span class="token punctuation">)</span><span class="token punctuation">:</span> test_case_status<span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token keyword">if</span> training<span class="token punctuation">:</span>
        work <span class="token operator">=</span> process_training<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>submission_id<span class="token punctuation">,</span> statistics<span class="token punctuation">)</span>
        <span class="token comment"># 等待排名更新操作完成</span>
        <span class="token keyword">while</span> <span class="token keyword">not</span> work<span class="token punctuation">.</span>ready<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            sleep<span class="token punctuation">(</span><span class="token number">0.1</span><span class="token punctuation">)</span>
        process_statistics<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>submission_id<span class="token punctuation">,</span> <span class="token string">&quot;Training&quot;</span><span class="token punctuation">,</span> training<span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        process_statistics<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>submission_id<span class="token punctuation">,</span> <span class="token string">&quot;Problem&quot;</span><span class="token punctuation">)</span>
        process_statistics<span class="token punctuation">.</span>delay<span class="token punctuation">(</span>submission_id<span class="token punctuation">,</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> submit<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">,</span> submit<span class="token punctuation">.</span>status<span class="token punctuation">,</span> statistics
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>更新数据操作的流程为对所有的提交进行过滤以及统计，把得到的数据再进行更新处理。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># YeeOnlineJudge/tasks.py</span>

<span class="token decorator annotation punctuation">@shared_task</span>
<span class="token keyword">def</span> <span class="token function">process_statistics</span><span class="token punctuation">(</span>submission_id<span class="token punctuation">,</span> process_type<span class="token punctuation">,</span> training<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
    submit <span class="token operator">=</span> Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>submission_id<span class="token punctuation">)</span>
    creator_profile <span class="token operator">=</span> submit<span class="token punctuation">.</span>created_by<span class="token punctuation">.</span>profile
    problem <span class="token operator">=</span> submit<span class="token punctuation">.</span>problem

    <span class="token comment"># 更新题目或用户数据</span>
    <span class="token keyword">if</span> process_type <span class="token operator">==</span> <span class="token string">&quot;User&quot;</span><span class="token punctuation">:</span>
        statistics <span class="token operator">=</span> creator_profile<span class="token punctuation">.</span>statistics
        statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Commit<span class="token operator">=</span>Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>created_by<span class="token operator">=</span>creator_profile<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>
            submit<span class="token punctuation">.</span>status<span class="token punctuation">:</span> Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>
                Q<span class="token punctuation">(</span>status<span class="token operator">=</span>submit<span class="token punctuation">.</span>status<span class="token punctuation">)</span> <span class="token operator">&amp;</span>
                Q<span class="token punctuation">(</span>created_by<span class="token operator">=</span>creator_profile<span class="token punctuation">.</span>user_id<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token string">&quot;problem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        creator_profile<span class="token punctuation">.</span>statistics <span class="token operator">=</span> statistics
        creator_profile<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> process_type <span class="token operator">==</span> <span class="token string">&quot;Problem&quot;</span><span class="token punctuation">:</span>
        statistics <span class="token operator">=</span> problem<span class="token punctuation">.</span>statistics
        statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Commit<span class="token operator">=</span>Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>problem_id<span class="token operator">=</span>problem<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>
            submit<span class="token punctuation">.</span>status<span class="token punctuation">:</span> Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>
                Q<span class="token punctuation">(</span>problem_id<span class="token operator">=</span>problem<span class="token punctuation">.</span><span class="token builtin">id</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>
                Q<span class="token punctuation">(</span>status<span class="token operator">=</span>submit<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token string">&quot;created_by&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        problem<span class="token punctuation">.</span>statistics <span class="token operator">=</span> statistics
        problem<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">elif</span> process_type <span class="token operator">==</span> <span class="token string">&quot;Training&quot;</span><span class="token punctuation">:</span>
        train <span class="token operator">=</span> submit<span class="token punctuation">.</span>training
        train_rank <span class="token operator">=</span> train<span class="token punctuation">.</span>trainingrank_set<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user<span class="token operator">=</span>submit<span class="token punctuation">.</span>created_by<span class="token punctuation">)</span>
        statistics <span class="token operator">=</span> train_rank<span class="token punctuation">.</span>statistics<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&quot;statistics&quot;</span><span class="token punctuation">)</span>
        statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span>Commit<span class="token operator">=</span>Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>
                          <span class="token builtin">filter</span><span class="token punctuation">(</span>Q<span class="token punctuation">(</span>created_by<span class="token operator">=</span>submit<span class="token punctuation">.</span>created_by<span class="token punctuation">)</span> <span class="token operator">&amp;</span> Q<span class="token punctuation">(</span>training<span class="token operator">=</span>training<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
        statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token punctuation">{</span>
            submit<span class="token punctuation">.</span>status<span class="token punctuation">:</span> Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span><span class="token builtin">filter</span><span class="token punctuation">(</span>
                Q<span class="token punctuation">(</span>training<span class="token operator">=</span>training<span class="token punctuation">)</span> <span class="token operator">&amp;</span>
                Q<span class="token punctuation">(</span>status<span class="token operator">=</span>submit<span class="token punctuation">.</span>status<span class="token punctuation">)</span>
            <span class="token punctuation">)</span><span class="token punctuation">.</span>distinct<span class="token punctuation">(</span><span class="token string">&quot;problem&quot;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
        train_rank<span class="token punctuation">.</span>statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span>statistics<span class="token operator">=</span>statistics<span class="token punctuation">)</span>
        train_rank<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">else</span><span class="token punctuation">:</span>
        <span class="token keyword">return</span> <span class="token string">&quot;process_type 有误&quot;</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>process_type<span class="token punctuation">:</span> statistics<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>训练比赛的排名更新则是根据提交状态来叠加测试样例的分数和对提交状态的更新。</p><div class="language-python line-numbers-mode" data-ext="py"><pre class="language-python"><code><span class="token comment"># YeeOnlineJudge/tasks.py</span>

<span class="token decorator annotation punctuation">@shared_task</span>
<span class="token keyword">def</span> <span class="token function">process_training</span><span class="token punctuation">(</span>submission_id<span class="token punctuation">,</span> new_statistics<span class="token punctuation">)</span><span class="token punctuation">:</span>
    submit <span class="token operator">=</span> Submission<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span>submission_id<span class="token punctuation">)</span>
    user <span class="token operator">=</span> submit<span class="token punctuation">.</span>created_by
    train <span class="token operator">=</span> submit<span class="token punctuation">.</span>training
    train_rank <span class="token operator">=</span> train<span class="token punctuation">.</span>trainingrank_set<span class="token punctuation">.</span>get<span class="token punctuation">(</span>user<span class="token operator">=</span>user<span class="token punctuation">)</span>
    old_statistics <span class="token operator">=</span> train_rank<span class="token punctuation">.</span>statistics
    old_statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span>new_statistics<span class="token punctuation">)</span>
    score <span class="token operator">=</span> <span class="token number">0</span>
    <span class="token comment"># 计算分数</span>
    <span class="token keyword">for</span> key<span class="token punctuation">,</span> val <span class="token keyword">in</span> old_statistics<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
        <span class="token keyword">if</span> key <span class="token operator">==</span> <span class="token string">&quot;score&quot;</span> <span class="token keyword">or</span> key <span class="token operator">==</span> <span class="token string">&quot;statistics&quot;</span><span class="token punctuation">:</span>
            <span class="token keyword">continue</span>
        problem <span class="token operator">=</span> Problem<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>pk<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span>
        point <span class="token operator">=</span> problem<span class="token punctuation">.</span>point
        <span class="token keyword">for</span> order<span class="token punctuation">,</span> status <span class="token keyword">in</span> val<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>
            cur_point <span class="token operator">=</span> point<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">]</span>
            <span class="token keyword">if</span> status<span class="token punctuation">:</span>
                score <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cur_point<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">&#39;point&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
    old_statistics<span class="token punctuation">.</span>update<span class="token punctuation">(</span>score<span class="token operator">=</span>score<span class="token punctuation">)</span>
    train_rank<span class="token punctuation">.</span>statistics <span class="token operator">=</span> old_statistics
    train_rank<span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token punctuation">)</span>
    <span class="token keyword">return</span> old_statistics
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="结束" tabindex="-1"><a class="header-anchor" href="#结束" aria-hidden="true">#</a> 结束</h2>`,96),o=[e];function c(i,u){return s(),a("div",null,o)}const d=n(p,[["render",c],["__file","dev.html.vue"]]);export{d as default};
